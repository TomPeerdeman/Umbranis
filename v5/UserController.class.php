<?php	//Dit bestand kan alleen vanuit de index aangeroepen worden	if(!defined("INDEX"))die("NO INDEX!");	class UserController{		public $logged_in = false;		public $username;		public $admin_rights = false;				public function __construct(){					//Kijken of sha256 ondersteund wordt			if(!in_array("sha256", hash_algos()))die("User hash algorithm not available!");						if(isset($_SESSION['username'])){					//Gebruikers die meer dan 30 min inactief zijn uitloggen (gebeurt alleen bij ingelogde gebruikers!)				DB::$db->query("DELETE FROM logins WHERE  NOW() > DATE_ADD(last_action, INTERVAL 30 MINUTE)");								//Gebruiker object vullen				$this->login($_SESSION['username']);				$this->getLoginHash();			}		}				public function login($username, $newlogin = false){			if($newlogin){				$res = DB::$db->query("SELECT username, admin_rights, id					FROM users					WHERE username = '" . $username . "'					LIMIT 1");			}else{				$res = DB::$db->query("SELECT username, admin_rights, id, login_hash					FROM users					JOIN logins ON logins.user_id = users.id					WHERE username = '" . $username . "'					LIMIT 1");			}						if(!$res){				return;			}						//User die aangemeld moet worden bestaat niet of hij is al uitgelogd 			if($res->rowCount() != 1){				$this->username = $username;				$this->logout();				return;			}			$row = $res->fetch();						$this->logged_in = true;			$this->username = $row['username'];			$this->admin_rights = $row['admin_rights'];						if($newlogin){				//Nieuwe login sessie in de database zetten				DB::$db->query("INSERT INTO logins (user_id, login_hash) VALUES (" . $row['id'] . ", '" . $this->getLoginHash() . "')");			}else{				//Laatse actie tijdstip updaten				DB::$db->query("UPDATE logins SET last_action = NOW() WHERE user_id = '" . $row['id'] . "' LIMIT 1");								//Sessie hijacking preventie				if($row['login_hash'] != $this->getLoginHash()){					$this->logout();				}			}		}				public function logout(){			//Eindig sessie			session_unset();						//Gebruiker op uitgelogd zetten in de db.			DB::$db->query("DELETE FROM logins				WHERE user_id = (					SELECT id					FROM users					WHERE username = '" . $this->username . "'					LIMIT 1				)				LIMIT 1");						//Gebruiker uitladen			$this->logged_in = false;			$this->username = null;			$this->admin_rights = false;		}			public function is_admin(){			return $this->admin_rights;		}				public function is_member(){			return $this->logged_in;		}				public function getLoginHash(){			//Login hash genereren op basis van username, admin rechten, ip adres en browser			return hash("sha256", addslashes("User[" . $this->username . $this->admin_rights . $_SERVER['HTTP_USER_AGENT'] . $_SERVER['HTTP_ACCEPT'] . $_SERVER['HTTP_ACCEPT_LANGUAGE'] . $_SERVER['HTTP_ACCEPT_ENCODING'] . $_SERVER['REMOTE_ADDR'] . $_SERVER['HTTP_COOKIE'] . "]/User"));		}	}?>